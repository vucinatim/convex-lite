import fs from "fs/promises";
import path from "path";
import { getApiFiles, CONVEX_DIR } from "../server/utils/file-discovery.ts";

// --- Configuration ---
const GENERATED_DIR = path.join(CONVEX_DIR, "_generated");
const OUTPUT_FILE_JS = path.join(GENERATED_DIR, "api.js");
const OUTPUT_FILE_D_TS = path.join(GENERATED_DIR, "api.d.ts");

// --- Helper Functions ---

async function findApiExports(filePath) {
  const content = await fs.readFile(filePath, "utf-8");
  const functions = [];
  const localRegex = /export\s+const\s+([A-Za-z_][A-Za-z0-9_]*)/g;
  let match;
  while ((match = localRegex.exec(content)) !== null) {
    if (match[1]) functions.push(match[1] as never);
  }
  return functions;
}

function toCamelCase(str) {
  return str.replace(/([-_][a-z])/gi, (group) =>
    group.toUpperCase().replace("-", "").replace("_", "")
  );
}

// --- Main Generation Logic ---

async function generateApi() {
  console.log("\n[Generator] Starting API generation...");

  // THE FIX: Proactively delete the old generated files before starting.
  // This ensures a clean state and prevents any file caching issues.
  try {
    await fs.unlink(OUTPUT_FILE_JS);
    await fs.unlink(OUTPUT_FILE_D_TS);
    console.log("[Generator] Cleared previous generated files.");
  } catch (error) {
    // It's okay if the files don't exist on the first run.
    if (error.code !== "ENOENT") {
      console.error("[Generator] Error clearing old files:", error);
    }
  }

  const modules = {};

  const allApiFiles: string[] = [];
  for await (const filePath of getApiFiles(CONVEX_DIR)) {
    allApiFiles.push(filePath);
  }

  console.log(`[Generator] Found ${allApiFiles.length} API file(s):`);
  allApiFiles.forEach((file) =>
    console.log(`  - ${path.relative(process.cwd(), file)}`)
  );

  if (allApiFiles.length === 0) {
    console.warn(
      "[Generator] Warning: No API files found. New API files will not be generated."
    );
    return;
  }

  // Process the collected files.
  for (const filePath of allApiFiles) {
    const functions = await findApiExports(filePath);

    if (functions.length > 0) {
      const moduleKey = path
        .relative(CONVEX_DIR, filePath)
        .replace(/\.(ts|js)$/, "")
        .replace(/[/\\]/g, "_");

      const camelCasedModuleKey = toCamelCase(moduleKey);
      const moduleAlias = toCamelCase(moduleKey);
      const importPath = path
        .relative(GENERATED_DIR, filePath)
        .replace(/\\/g, "/")
        .replace(/\.(ts|js)$/, "");

      modules[camelCasedModuleKey] = {
        functions,
        identifierPrefix: `${moduleKey}:`,
        moduleAlias,
        importPath,
      };
    }
  }

  const fileHeader = `// This file is auto-generated by scripts/generate-convex-api.mjs
// Do not edit this file directly.
/* eslint-disable */
/* tslint:disable */
`;

  const sortedModuleNames = Object.keys(modules).sort();

  // --- Generate api.js content (for runtime) ---
  let jsContent = `${fileHeader}\nexport const api = {\n`;
  for (const moduleName of sortedModuleNames) {
    jsContent += `  ${moduleName}: {\n`;
    const { functions, identifierPrefix } = modules[moduleName];
    functions.sort().forEach((fnName) => {
      jsContent += `    ${fnName}: "${identifierPrefix}${fnName}",\n`;
    });
    jsContent += "  },\n";
  }
  jsContent += "};\n";

  // --- Generate api.d.ts content (for types and "Go to Definition") ---
  let dtsContent = `${fileHeader}\n`;
  for (const moduleName of sortedModuleNames) {
    const { moduleAlias, importPath } = modules[moduleName];
    dtsContent += `import type * as ${moduleAlias} from "${importPath}";\n`;
  }
  dtsContent += `\n/**\n * A type helper to build the API from modules, preserving the original function definitions.\n */\ntype ApiFromModules<Modules extends Record<string, any>> = {\n  [ModuleName in keyof Modules]: Modules[ModuleName];\n};\n\n`;
  dtsContent += `declare const fullApi: ApiFromModules<{\n`;
  for (const moduleName of sortedModuleNames) {
    dtsContent += `  ${moduleName}: typeof ${modules[moduleName].moduleAlias};\n`;
  }
  dtsContent += `}>;\n\n`;
  dtsContent += `export declare const api: typeof fullApi;\n`;

  await fs.mkdir(GENERATED_DIR, { recursive: true });
  await fs.writeFile(OUTPUT_FILE_JS, jsContent);
  await fs.writeFile(OUTPUT_FILE_D_TS, dtsContent);

  console.log(`âœ… Generated API runtime at ${OUTPUT_FILE_JS}`);
  console.log(`âœ… Generated API types at ${OUTPUT_FILE_D_TS}`);
  console.log("ðŸš€ API generation complete.");
}

generateApi().catch(console.error);
